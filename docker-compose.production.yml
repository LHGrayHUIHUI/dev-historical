# 历史文本项目生产环境Docker Compose配置
version: '3.8'

services:
  # 数据源服务
  data-source-service:
    image: ${IMAGE_PREFIX}-data-source:${VERSION_TAG}
    build:
      context: ./services/data-source
      dockerfile: Dockerfile
      target: runner
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VERSION=${VERSION_TAG}
        - GIT_COMMIT=${GIT_COMMIT}
    container_name: historical-text-data-source-prod
    restart: unless-stopped
    environment:
      - SERVICE_ENVIRONMENT=production
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=${DATA_SOURCE_PORT}
      - SERVICE_SECRET_KEY=${SERVICE_SECRET_KEY}
      
      # 数据库配置
      - DB_MONGODB_URL=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/historical_text_prod?authSource=admin
      - DB_REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      
      # 爬虫配置
      - CRAWLER_MAX_CONCURRENT_CRAWLERS=20
      - CRAWLER_ENABLE_PROXY=true
      - CRAWLER_REQUEST_DELAY_MIN=3.0
      - CRAWLER_REQUEST_DELAY_MAX=8.0
      
      # 代理配置
      - PROXY_PROXY_POOL_SIZE=200
      - PROXY_PROXY_CHECK_INTERVAL=300
      
      # 日志配置
      - LOG_LOG_LEVEL=${LOG_LEVEL}
      - LOG_JSON_LOGS=true
      
      # 监控配置
      - MONITOR_ENABLE_METRICS=true
      - MONITOR_CONSUL_HOST=consul
      - MONITOR_CONSUL_PORT=8500
    ports:
      - "${DATA_SOURCE_PORT}:${DATA_SOURCE_PORT}"
    volumes:
      - ./logs/data-source:/app/logs
      - ./data/data-source:/app/data
    networks:
      - historical-text-network
    depends_on:
      - mongodb
      - redis
      - consul
    deploy:
      resources:
        limits:
          memory: ${DATA_SOURCE_MEMORY_LIMIT}M
          cpus: '${DATA_SOURCE_CPU_LIMIT}'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      - "com.historical-text.service=data-source"
      - "com.historical-text.version=${VERSION_TAG}"
      - "com.historical-text.environment=production"

  # MongoDB数据库
  mongodb:
    image: mongo:5.0
    container_name: historical-text-mongodb-prod
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_prod_data:/data/db
      - ./docker/mongodb/init-prod.js:/docker-entrypoint-initdb.d/init.js:ro
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf:ro
    networks:
      - historical-text-network
    command: mongod --auth --config /etc/mongod.conf
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: historical-text-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis-prod.conf:/etc/redis/redis.conf:ro
    networks:
      - historical-text-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Consul服务发现
  consul:
    image: consul:1.15
    container_name: historical-text-consul-prod
    restart: unless-stopped
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    ports:
      - "8500:8500"
    volumes:
      - consul_prod_data:/consul/data
      - ./docker/consul/consul-prod.json:/consul/config/consul.json:ro
    networks:
      - historical-text-network
    command: consul agent -config-dir=/consul/config
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: historical-text-rabbitmq-prod
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_prod_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq-prod.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - historical-text-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: historical-text-nginx-prod
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./docker/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - historical-text-network
    depends_on:
      - data-source-service
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: historical-text-prometheus-prod
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./docker/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    networks:
      - historical-text-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'

  # Grafana可视化
  grafana:
    image: grafana/grafana:9.3.0
    container_name: historical-text-grafana-prod
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - historical-text-network
    depends_on:
      - prometheus

  # 日志收集 - Filebeat
  filebeat:
    image: elastic/filebeat:8.8.0
    container_name: historical-text-filebeat-prod
    restart: unless-stopped
    user: root
    volumes:
      - ./docker/filebeat/filebeat-prod.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - historical-text-network
    depends_on:
      - data-source-service

volumes:
  mongodb_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mongodb
  redis_prod_data:
    driver: local
  consul_prod_data:
    driver: local
  rabbitmq_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

networks:
  historical-text-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: historical-text-br0