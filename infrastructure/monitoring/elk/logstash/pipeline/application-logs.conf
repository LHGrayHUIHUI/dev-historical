# Logstash配置文件 - 历史文本处理项目日志处理
# 处理来自各微服务的结构化日志，进行解析、过滤和输出到Elasticsearch

input {
  # Beats输入 - 接收来自Filebeat的日志
  beats {
    port => 5044
    host => "0.0.0.0"
  }
  
  # Syslog输入 - 处理系统日志
  syslog {
    port => 5140
    host => "0.0.0.0"
    codec => cef
    timezone => "Asia/Shanghai"
  }
  
  # TCP输入 - 处理应用程序直接发送的日志
  tcp {
    port => 5000
    host => "0.0.0.0"
    codec => json_lines
  }
}

filter {
  # 通用字段处理
  if [@metadata][beat] {
    # 处理来自Filebeat的日志
    mutate {
      add_field => { "log_source" => "filebeat" }
      add_field => { "[@metadata][index_prefix]" => "filebeat-historical-text" }
    }
  } else {
    # 处理直接输入的日志
    mutate {
      add_field => { "log_source" => "direct" }
      add_field => { "[@metadata][index_prefix]" => "application-historical-text" }
    }
  }
  
  # 时间戳处理
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
      target => "@timestamp"
      timezone => "Asia/Shanghai"
    }
  }
  
  # 解析JSON格式的结构化日志
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "parsed"
    }
    
    # 提取解析后的字段
    if [parsed] {
      mutate {
        add_field => {
          "service_name" => "%{[parsed][service_name]}"
          "log_level" => "%{[parsed][level]}"
          "module" => "%{[parsed][name]}"
          "function" => "%{[parsed][function]}"
          "line_number" => "%{[parsed][line]}"
        }
      }
      
      # 处理请求ID
      if [parsed][extra][request_id] {
        mutate {
          add_field => { "request_id" => "%{[parsed][extra][request_id]}" }
        }
      }
      
      # 处理用户ID
      if [parsed][extra][user_id] {
        mutate {
          add_field => { "user_id" => "%{[parsed][extra][user_id]}" }
        }
      }
      
      # 处理错误信息
      if [parsed][exception] {
        mutate {
          add_field => {
            "error_type" => "%{[parsed][exception][type]}"
            "error_message" => "%{[parsed][exception][message]}"
          }
        }
      }
    }
  }
  
  # 处理微服务特定的日志格式
  if [service_name] {
    case [service_name] {
      "data-source-service" => {
        # 数据源服务日志处理
        if [message] =~ /爬取.*成功/ {
          mutate {
            add_field => { "event_type" => "scraping_success" }
            add_tag => ["success", "scraping"]
          }
        } else if [message] =~ /爬取.*失败/ {
          mutate {
            add_field => { "event_type" => "scraping_error" }
            add_tag => ["error", "scraping"]
          }
        }
      }
      
      "data-collection-service" => {
        # 数据采集服务日志处理
        if [message] =~ /文件上传.*完成/ {
          mutate {
            add_field => { "event_type" => "file_upload_success" }
            add_tag => ["success", "file_upload"]
          }
        } else if [message] =~ /文件处理.*失败/ {
          mutate {
            add_field => { "event_type" => "file_processing_error" }
            add_tag => ["error", "file_processing"]
          }
        }
      }
      
      "ocr-service" => {
        # OCR服务日志处理
        if [message] =~ /OCR识别.*完成/ {
          mutate {
            add_field => { "event_type" => "ocr_success" }
            add_tag => ["success", "ocr"]
          }
          
          # 提取置信度信息
          grok {
            match => { "message" => "置信度[：:]?\s*%{NUMBER:ocr_confidence:float}" }
            tag_on_failure => []
          }
        }
      }
      
      "ai-analysis-service" => {
        # AI分析服务日志处理
        if [message] =~ /AI分析.*完成/ {
          mutate {
            add_field => { "event_type" => "ai_analysis_success" }
            add_tag => ["success", "ai_analysis"]
          }
        }
      }
    }
  }
  
  # 日志级别标准化
  if [log_level] {
    mutate {
      uppercase => ["log_level"]
    }
    
    # 根据日志级别添加标签
    case [log_level] {
      "ERROR" => {
        mutate {
          add_tag => ["error", "alert"]
          add_field => { "severity" => "high" }
        }
      }
      "WARN" or "WARNING" => {
        mutate {
          add_tag => ["warning"]
          add_field => { "severity" => "medium" }
        }
      }
      "INFO" => {
        mutate {
          add_tag => ["info"]
          add_field => { "severity" => "low" }
        }
      }
      "DEBUG" => {
        mutate {
          add_tag => ["debug"]
          add_field => { "severity" => "very_low" }
        }
      }
    }
  }
  
  # 性能监控日志处理
  if "performance" in [tags] {
    grok {
      match => { "message" => "性能监控.*耗时[：:]?\s*%{NUMBER:duration:float}s" }
      tag_on_failure => []
    }
    
    if [duration] {
      # 根据执行时间添加标签
      if [duration] > 5.0 {
        mutate {
          add_tag => ["slow_operation"]
          add_field => { "performance_alert" => "slow" }
        }
      } else if [duration] > 1.0 {
        mutate {
          add_tag => ["medium_operation"]
        }
      } else {
        mutate {
          add_tag => ["fast_operation"]
        }
      }
    }
  }
  
  # 安全相关日志处理
  if [message] =~ /(登录.*失败|authentication.*failed|unauthorized|access.*denied)/i {
    mutate {
      add_field => { "event_type" => "security_event" }
      add_tag => ["security", "authentication_failure"]
    }
  }
  
  if [message] =~ /(病毒|virus|malware|infected)/i {
    mutate {
      add_field => { "event_type" => "security_threat" }
      add_tag => ["security", "virus_detection", "alert"]
    }
  }
  
  # HTTP请求日志处理
  if [message] =~ /^(GET|POST|PUT|DELETE|HEAD|OPTIONS)/ {
    grok {
      match => {
        "message" => "%{WORD:http_method} %{URIPATH:http_path}(?: %{URIQUERY:http_query})? %{NUMBER:http_status:int}(?: %{NUMBER:response_time:float}ms)?"
      }
      tag_on_failure => []
    }
    
    if [http_status] {
      # 根据HTTP状态码添加标签
      if [http_status] >= 500 {
        mutate {
          add_tag => ["http_5xx", "error"]
          add_field => { "http_status_class" => "5xx" }
        }
      } else if [http_status] >= 400 {
        mutate {
          add_tag => ["http_4xx", "client_error"]
          add_field => { "http_status_class" => "4xx" }
        }
      } else if [http_status] >= 300 {
        mutate {
          add_tag => ["http_3xx", "redirect"]
          add_field => { "http_status_class" => "3xx" }
        }
      } else if [http_status] >= 200 {
        mutate {
          add_tag => ["http_2xx", "success"]
          add_field => { "http_status_class" => "2xx" }
        }
      }
    }
  }
  
  # 清理无用字段
  mutate {
    remove_field => ["parsed", "beat", "offset", "prospector", "input", "@version"]
  }
  
  # 添加处理时间戳
  mutate {
    add_field => { "processed_at" => "%{[@timestamp]}" }
  }
}

output {
  # 输出到Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index_prefix]}-%{+YYYY.MM.dd}"
    
    # 根据日志级别使用不同的索引模板
    template_name => "historical-text-logs"
    template_pattern => ["historical-text-*", "filebeat-historical-text-*", "application-historical-text-*"]
    
    # 索引模板配置
    template => {
      "index_patterns" => ["historical-text-*", "filebeat-historical-text-*", "application-historical-text-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 1,
        "index.refresh_interval" => "10s",
        "index.codec" => "best_compression"
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => {
            "type" => "date",
            "format" => "strict_date_optional_time||epoch_millis"
          },
          "service_name" => {
            "type" => "keyword"
          },
          "log_level" => {
            "type" => "keyword"
          },
          "message" => {
            "type" => "text",
            "analyzer" => "ik_max_word",
            "search_analyzer" => "ik_smart"
          },
          "request_id" => {
            "type" => "keyword"
          },
          "user_id" => {
            "type" => "keyword"
          },
          "event_type" => {
            "type" => "keyword"
          },
          "http_status" => {
            "type" => "integer"
          },
          "duration" => {
            "type" => "float"
          },
          "response_time" => {
            "type" => "float"
          },
          "ocr_confidence" => {
            "type" => "float"
          }
        }
      }
    }
    
    # 文档ID生成策略
    document_id => "%{fingerprint}"
    
    # 错误处理
    manage_template => true
    template_overwrite => true
  }
  
  # 错误日志输出到专门的索引
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "error-logs-historical-text-%{+YYYY.MM.dd}"
    }
  }
  
  # 安全事件输出到安全索引
  if "security" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "security-logs-historical-text-%{+YYYY.MM.dd}"
    }
  }
  
  # 性能监控日志输出到性能索引
  if "performance" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "performance-logs-historical-text-%{+YYYY.MM.dd}"
    }
  }
  
  # 调试输出（仅在开发环境）
  if [log_level] == "DEBUG" and [environment] == "development" {
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  }
}